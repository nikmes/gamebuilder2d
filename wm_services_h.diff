diff --git a/dee70140e65047c5a9550847195bbf54e8c0234b b/8c166f41ea52b7da6cf6649a7434536a339100fd
index dee7014..8c166f4 100644
--- a/dee70140e65047c5a9550847195bbf54e8c0234b
+++ b/8c166f41ea52b7da6cf6649a7434536a339100fd
@@ -11,15 +11,14 @@
 // ImGuiColorTextEdit editor
 #include <TextEditor.h>
 
-// Include logging definitions (LogLine) needed for incremental log console state.
-#include "services/logger/LogManager.h"
-
 namespace gb2d {
 
 class WindowManager {
 public:
     WindowManager();
     ~WindowManager();
+    // Explicit, idempotent teardown in case caller wants deterministic order
+    void shutdown();
 
     struct ManagedWindow {
         std::string id;
@@ -99,47 +98,6 @@ private:
     uint32_t console_level_mask_{0x3F}; // bits: 0=trace,1=debug,2=info,3=warn,4=err,5=critical
     std::string console_text_filter_{};
 
-    // New TextEditor-backed log console state (Phase 1 replacement)
-    TextEditor log_editor_{};              // Read-only view of filtered log
-    bool log_editor_initialized_{false};   // Lazy init flag
-    size_t log_last_snapshot_size_{0};     // Last snapshot size used to build editor text
-    uint64_t log_last_hash_{0};            // Hash of (snapshot_size, level_mask, filter_text)
-    bool log_user_was_at_bottom_{true};    // Track if user was at bottom before rebuild for refined autoscroll
-    // Use alias to guard against any macro/name collision on 'logging'
-    using LoggingLine = ::gb2d::logging::LogLine;
-    std::vector<LoggingLine> log_prev_raw_; // Last raw snapshot for incremental append decision
-    std::string log_editor_text_cache_;    // Cached full text currently loaded in log_editor_
-    size_t log_prev_emitted_count_{0};      // How many raw lines contributed to current editor text (post-filter)
-    size_t log_prev_char_count_{0};          // Cached character count of editor text to detect no-op rebuilds
-    size_t log_text_version_{0};             // Monotonic version incremented whenever log_editor_text_cache_ mutates
-
-    // Console search (T2.5) state
-    std::string console_search_query_{};              // current search query (independent of filter)
-    std::string console_search_last_query_{};         // last query we processed
-    size_t console_search_last_version_{(size_t)-1};  // last log_text_version_ we processed
-    struct ConsoleSearchMatch { int line; int start_col; int end_col; }; // [start_col,end_col)
-    std::vector<ConsoleSearchMatch> console_search_matches_{};
-    int console_search_current_index_{0};
-    bool console_search_case_sensitive_{false};
-    bool console_search_selection_dirty_{false};       // trigger selection update in editor
-    bool console_search_last_case_sensitive_{false};    // detect toggles
-
-    // Phase 2 instrumentation (T2.1): performance & behavior counters (debug builds only)
-#ifdef GB2D_LOG_CONSOLE_INSTRUMENT
-    struct LogConsoleMetrics {
-        uint64_t total_full_rebuilds{0};
-        uint64_t total_incremental_appends{0};
-        uint64_t total_noop_skips{0};          // hash stable early-return
-        uint64_t total_settext_calls{0};       // actual SetText invocations
-        uint64_t total_frames{0};              // frames rebuild evaluated
-        uint64_t total_truncation_fallbacks{0}; // times incremental disabled due to prefix mismatch (ring eviction or history change)
-        double   accum_full_rebuild_ms{0.0};
-        double   accum_incremental_ms{0.0};
-        double   last_op_ms{0.0};
-        bool     last_was_incremental{false};
-    } log_metrics_{};
-#endif
-
     // Text Editor state (multi-tab)
     struct EditorTab {
         std::string path;      // absolute or relative on open
@@ -165,9 +123,8 @@ private:
     static bool isTextLikeExtension(const std::string& ext);
     static const TextEditor::LanguageDefinition& languageForExtension(const std::string& ext, std::string& outName);
 
-    // Log console helpers
-    void initLogEditorIfNeeded();
-    void rebuildLogEditorIfNeeded();
+    // Teardown state
+    bool shutting_down_{false};
 };
 
 } // namespace gb2d
